{"version":3,"sources":["utils.js","components/Map/Map.jsx","config/mapToken.js","components/App/App.jsx","api/fetchPubs.js","index.js"],"names":["pixelValue","latitude","meters","zoomLevel","latitudeRadians","Math","PI","cos","pow","metersPerPixel","style","width","height","Map","popup","mapboxgl","Popup","onLoad","props","center","accuracy","pubs","map","addSource","type","data","features","properties","geometry","coordinates","addLayer","id","source","paint","stops","layout","on","onMouseMove","e","queryRenderedFeatures","point","layers","length","setLngLat","lngLat","setHTML","name","phone","website","addTo","this","accessToken","container","zoom","minZoom","PureComponent","App","state","longitude","navigator","geolocation","getCurrentPosition","coords","setState","s","w","n","bbox","Promise","resolve","reject","fetch","then","response","json","osmtogeojson","catch","err","fetchPubs","error","console","Object","values","margin","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9975585.chunk.js","sourcesContent":["// Metres per pixel math\n// The distance represented by one pixel (S) is given by\n//\n// S=C*cos(y)/2^(z+8)\n// where...\n//\n// C is the (equatorial) circumference of the Earth\n// z is the zoom level\n// y is the latitude of where you're interested in the scale.\n\nexport const metersPerPixel = (latitude, zoomLevel) => {\n  const earthCircumference = 40075017;\n  const latitudeRadians = latitude * (Math.PI / 180);\n  // eslint-disable-next-line\n  return ((earthCircumference * Math.cos(latitudeRadians)) / Math.pow(2, zoomLevel + 8));\n};\n\nexport const pixelValue = (latitude, meters, zoomLevel) => (\n  meters / metersPerPixel(latitude, zoomLevel)\n);\n","import React, { PureComponent } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\n// config\nimport mapToken from '../../config/mapToken';\n\n// utils\nimport { pixelValue } from '../../utils';\n\nconst style = {\n  width: '100%',\n  height: '100vh'\n};\n\nclass Map extends PureComponent {\n  popup = new mapboxgl.Popup();\n\n  componentDidMount() {\n    const { center } = this.props;\n    mapboxgl.accessToken = mapToken;\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/light-v9',\n      center,\n      zoom: 9,\n      minZoom: 8\n    });\n\n    this.map.on('load', this.onLoad);\n  }\n\n  onLoad = () => {\n    const { center, accuracy, pubs } = this.props;\n\n    this.map.addSource('location', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'Point',\n              coordinates: center\n            }\n          }\n        ]\n      }\n    });\n    this.map.addSource('pubs', {\n      type: 'geojson',\n      data: pubs\n    });\n\n    this.map.addLayer({\n      id: 'location',\n      type: 'circle',\n      source: 'location',\n      paint: {\n        'circle-color': '#2dd860'\n      }\n    });\n    this.map.addLayer({\n      id: 'locationHalo',\n      type: 'circle',\n      source: 'location',\n      paint: {\n        'circle-color': 'rgba(45,216,96,.5)',\n        'circle-radius': {\n          stops: [\n            [8, pixelValue(center[1], accuracy, 8)],\n            [9, pixelValue(center[1], accuracy, 9)],\n            [10, pixelValue(center[1], accuracy, 10)],\n            [11, pixelValue(center[1], accuracy, 11)],\n            [12, pixelValue(center[1], accuracy, 12)],\n            [13, pixelValue(center[1], accuracy, 13)],\n            [14, pixelValue(center[1], accuracy, 14)],\n            [15, pixelValue(center[1], accuracy, 15)],\n            [16, pixelValue(center[1], accuracy, 16)],\n            [17, pixelValue(center[1], accuracy, 17)],\n            [18, pixelValue(center[1], accuracy, 18)],\n            [19, pixelValue(center[1], accuracy, 19)],\n            [20, pixelValue(center[1], accuracy, 20)],\n            [22, pixelValue(center[1], accuracy, 22)]\n          ]\n        }\n      }\n    });\n    this.map.addLayer({\n      id: 'pubs',\n      type: 'circle',\n      source: 'pubs',\n      paint: {\n        'circle-color': '#5c9ed8'\n      }\n    });\n    this.map.addLayer({\n      id: 'pubs-names',\n      type: 'symbol',\n      source: 'pubs',\n      layout: {\n        'text-field': '{name}',\n        'text-anchor': 'bottom'\n      }\n    });\n\n    this.map.on('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove = (e) => {\n    const features = this.map.queryRenderedFeatures(\n      e.point, { layers: ['pubs'] }\n    );\n    if (features.length > 0) {\n      const { properties } = features[0];\n\n      this.popup\n        .setLngLat(e.lngLat)\n        .setHTML(`\n          <div>${properties.name}</div>\n          <div>телефон: ${properties.phone || properties['contact:phone']}</div>\n          <div>${properties.website || properties['contact:website']}</div>\n        `)\n        .addTo(this.map);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        id='map'\n        style={style}\n      />\n    );\n  }\n}\n\nexport default Map;\n","export default 'pk.eyJ1IjoiZGV2aWNlMjUiLCJhIjoiY2lzaGN3d2tiMDAxOTJ6bGYydDZrcHptdiJ9.UK55aUzBquqYns1AdnuTQg';\n","import React, { PureComponent } from 'react';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './global.module.css';\n\nimport fetchPubs from '../../api/fetchPubs';\n\nimport Map from '../Map';\n\nclass App extends PureComponent {\n  state = {\n    pubs: {},\n    latitude: null,\n    longitude: null,\n    accuracy: null\n  };\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(({ coords }) => {\n      this.setState({\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        accuracy: coords.accuracy\n      });\n\n      const s = coords.latitude - 0.4;\n      const w = coords.longitude - 0.4;\n      const n = coords.latitude + 0.4;\n      const e = coords.longitude + 0.4;\n      const bbox = `${s},${w},${n},${e}`;\n\n      fetchPubs(bbox)\n        .then(pubs => this.setState({ pubs }))\n        .catch(error => console.error(error));\n    }, error => console.error(error));\n  }\n\n  render() {\n    const {\n      pubs, longitude, latitude, accuracy\n    } = this.state;\n\n    if (Object.values(pubs).length === 0) {\n      return (\n        <h2 style={{ width: '100px', margin: 'auto' }}>\n          loading...\n        </h2>\n      );\n    }\n\n    return (\n      <Map\n        pubs={pubs}\n        center={[longitude, latitude]}\n        accuracy={accuracy}\n      />\n    );\n  }\n}\n\nexport default App;\n","import osmtogeojson from 'osmtogeojson';\n\nexport default bbox =>\n  new Promise((resolve, reject) =>\n    fetch(`https://overpass.openstreetmap.fr/api/interpreter?data=[out:json];node[amenity=pub](${bbox});out;`)\n      .then(response => response.json())\n      .then(json => resolve(osmtogeojson(json)))\n      .catch(err => reject(err)));\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './components/App';\n\nrender(<App />, document.getElementById('app'));\n"],"sourceRoot":""}